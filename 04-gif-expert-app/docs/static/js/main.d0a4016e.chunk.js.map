{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","giphyUrl","encodeURI","fetch","result","json","data","map","img","id","title","url","images","downsized_medium","GifGridItem","rand","Math","random","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAe9C,OACM,sBAAMC,SATS,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKhB,SACE,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACJ,mCACD,GACRC,EAHa,iDAGyCC,UAAUH,GAHnD,kBAEL,GAFK,oBACJ,oCADI,SAKEI,MAAMF,GALR,cAKbG,EALa,gBAMIA,EAAOC,OANX,uBAMXC,EANW,EAMXA,KANW,kBAOZA,EAAKC,KAAK,SAAAC,GAAG,YAAK,CACrBC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,SAVnB,4CAAH,sDCCPG,EAAc,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC3BI,EAAOC,KAAKC,SAClB,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKR,EAAKS,IAAKV,IACpB,4BAAIA,MAFqDK,ICDxDM,EAAU,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,ECCb,SAAEA,GAAe,IAAD,EAGdd,mBAAS,CAC/BqB,KAAM,GACNgB,SAAS,IAL2B,mBAGjCC,EAHiC,KAG1BC,EAH0B,KAkBxC,OAVAC,qBAAW,WACP3B,EAAQC,GACH2B,MAAM,SAAAC,GACPH,EAAS,CACLlB,KAAMqB,EACNL,SAAS,SAGlB,CAACvB,IAEGwB,EDjB0BK,CAAa7B,GAAjCa,EAFwB,EAE7BN,KAAagB,EAFgB,EAEhBA,QAErB,OACI,qCACA,6BAAMvB,IAEJuB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SAGQN,EAAOL,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEdrBoB,EAAe,WAAO,IAAD,EAEM5C,mBAAS,CAAC,cAFhB,mBAEvBQ,EAFuB,KAEXT,EAFW,KAI9B,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEIS,EAAWc,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCZ9B+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d0a4016e.chunk.js","sourcesContent":["\r\nimport React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(categories => [inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n          </form> \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async( category ) => {\r\n    const apiKey = 'NzfsgwuUHuPGCqsHgMW7sHKVmdNsTBmG';\r\n    const limit = 10;\r\n    const giphyUrl = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=${limit}&api_key=${apiKey}`;\r\n    \r\n    const result = await fetch(giphyUrl)\r\n    const { data } = await result.json();\r\n    return data.map( img => ({\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url\r\n    }));\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    const rand = Math.random();\r\n    return (\r\n        <div className=\"card animate__animated animate__fadein\" key={rand}>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3>{ category }</h3>\r\n\r\n        { loading && <p>Loading</p> }\r\n        <div className=\"card-grid\">\r\n            \r\n            {\r\n                images.map( img => (\r\n                    <GifGridItem \r\n                        key={ img.id }\r\n                        { ...img }\r\n                    />\r\n                ))\r\n            }            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Samurai X'] );\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <ol>\r\n            {\r\n                categories.map(category => (\r\n                    <GifGrid\r\n                        key={ category } \r\n                        category={ category }/>\r\n                ))\r\n            }\r\n            </ol>\r\n        </>\r\n    )\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {GifExpertApp} from './GifExpertApp';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <GifExpertApp/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}